[alias]
  b = branch -vv
  branches = branch -a -vv
  dc = diff --cached
  pu = "!git push -u origin $(git rev-parse --abbrev-ref HEAD)"
  r = remote -v
  recent = branch --sort=-committerdate
  remotes = remote -v
  repo = "log --graph --oneline --all --color=always --date=relative --pretty=format:'%C(yellow)%h %Cblue%ad %Creset%s %Cgreen[%cn]%Cred%d%Creset' --since='2 days ago'"
  tags = tag -l
  tree = "log --graph --decorate --pretty=oneline --abbrev-commit"
  conflicts = "diff --name-only --diff-filter=U"

  f = fetch
  fp = fetch -p

  rsoft = reset --soft HEAD^
  co = checkout
  r = rebase
  ri = rebase -i
  fix = "!f() { ${VISUAL} `git conflicts`; }; f"
  a = add -u -p
  cv = commit -v
  fixup = commit --amend --no-edit
  p = push


  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

[apply]
    # Detect whitespace errors when applying a patch
  whitespace = fix

[core]
    # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on OS X
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false

[color]
    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = auto

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions

[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[diff]
    # Detect copies as well as renames
  renames = copies
  tool = vimdiff
  guitool = gvimdiff

[help]
    # Automatically correct and execute mistyped commands
  autocorrect = 1

[merge]
    # Include summaries of merged commits in newly created merge commit messages
  log = true
  conflictstyle = diff3
  tool = vimdiff
  guitool = gvimdiff

[rerere]
  enabled = false

[push]
    # Use the Git 2.?.x default
    # `git config --global push.default simple`. See http://git.io/mMah-w.
  default = simple

[rebase]
  # https://git-scm.com/docs/git-config#git-config-rebaseautoStash
  # Stashes and unstashes files on rebase
  autostash = true

# URL shorthands
[url "git@github.com:"]
  insteadOf = "gh:"
  pushInsteadOf = "github:"
  pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
  insteadOf = "github:"
[url "git@gist.github.com:"]
  insteadOf = "gst:"
  pushInsteadOf = "gist:"
  pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
  insteadOf = "gist:"
[credential]
  helper = osxkeychain
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
[user]
  name = John Elliott
  email = johnelliott703@gmail.com
